# {{ ansible_managed }}
{% if bgp_router is defined %}
# BGP router

define BOGON_ASNS = [0, 23456, 64496..131071, 4200000000..4294967295];

{% if ebgp_peers is defined %}
{% for peer in ebgp_peers %}
{% if peer.ipv4dst is defined %}
{% set ouras = ff_network.as_number|int %}
{% set bgp_max_pfx_len = 24 %}
{% set community_in = 23456 %}
filter peer_in_{{ peer.name|replace("-", "_")|replace(":", "__") }}
prefix set {{ peer.import4|replace("-", "_")|replace(":", "__") }}_PFX;
{% if peer.reimport_filter4 is defined %}
{% if peer.reimport_filter4 != 'ANY' and peer.reimport_filter4 != "DEFONLY" %}
prefix set {{ peer.reimport_filter4|replace("-", "_")|replace(":", "__") }}_PFX;
{% endif %}
{% endif %}
int set bogon_asns;
{
{% if peer.ouras is defined %}{% set ouras = peer.ouras %}{% endif %}
{% if peer.bgpmaxpfxlen4 is defined %}{% set bgp_max_pfx_len = peer.bgpmaxpfxlen4 %}{% endif %}
{% if peer.community_in is defined %}{% set community_in = peer.community_in|int %}{% endif %}
{% if peer.import4 is defined %}
  # Scrub BLACKHOLE Community from peering partners
  bgp_community.delete((65535, 666));

{% if peer.import_filter4 is defined %}
  # Initially, to do special-case rejects
  include "/etc/bird/bird.conf.d/{{ peer.import_filter4 }}";

{% endif %}
  # ignore bogon AS_PATHs
  bogon_asns = BOGON_ASNS;
  if (bgp_path ~ bogon_asns) then {
    #print "Import rejected: bogon AS_PATH: ", net, " ", bgp_path;
    reject;
  }
{% if peer.import4 == "ANY" %}
  if (avoid_martians() && bgp_path.len <= {{ bgp_max_pfx_len}}) then {
{% elif peer.import4 == "DEFONLY" %}
  if (is_default()) then {
{% else %}
  include "/etc/bird/bird.conf.d/{{ peer.import4 }}_PFX4.inc";
  if (net ~ {{ peer.import4|replace("-", "_")|replace(":", "__") }}_PFX) then {
{% endif %}
{% if peer.reimport_filter4 is defined %}
{% if peer.reimport_filter4 != "ANY" and peer.reimport_filter4 != "DEFONLY" %}
    # Don't import our prefixes we'll export
    include "/etc/bird/bird.conf.d/{{ peer.reimport_filter4 }}_PFX4.inc";
    if (net ~ {{ peer.reimport_filter4|replace("-", "_")|replace(":", "__") }}_PFX) then {
      #print "REJECT: Import of own export prefix: ", net, " via ", bgp_path;
      reject;
    }

{% endif %}
{% endif %}
    bgp_med = 0;
    bgp_local_pref = 100;
{% if peer.bgppref is defined %}
    bgp_local_pref = {{ peer.bgppref|int }};
{% else %}
{% if peer.pref is defined %}
    bgp_local_pref = {{ peer.pref|int }};
{% endif %}
{% endif %}
{% if peer.import_filter4 is defined %}

  # Again; this time to modify route attributes.
  #include "/etc/bird/bird.conf.d/{{ peer.import_filter4 }}";
{% endif %}

    # Scrub BGP Communities (RFC 7454 Section 11)
{% if ouras < 65536 %}
    bgp_community.delete([({{ ouras }}, 3000)..({{ ouras }}, 3500)]);
    bgp_community.add(({{ ouras }}, {{ community_in }})); /* mark peering routes as peering routes */
{% endif %}
    bgp_large_community.delete([({{ ouras }}, 0, *), ({{ ouras }}, 5, *), ({{ ouras }}, 6, *)]);
    bgp_large_community.add(({{ ouras }}, {{ community_in }}, {{ peer.peeras }}));
    bgp_large_community.add(({{ ouras }}, {{ community_in }}, 0));
    if (({{ ouras }}, 500, 0) ~ bgp_large_community) then {
      bgp_large_community.add(({{ ouras }}, 8, 0));
    }
    accept;
  }
{% else %}
  # No import4: line found
{% endif %}
  reject;
}

filter peer_out_{{ peer.name|replace("-", "_")|replace(":", "__") }}
prefix set {{ peer.export4|replace("-", "_")|replace(":", "__") }}_PFX;
int set bogon_asns;
{
{% if peer.export4 is defined %}
{% if peer.export_filter4 is defined %}
  include "/etc/bird/bird.conf.d/{{ peer.export_filter4 }}";
{% endif %}

{% if peer.export4 == "ANY" %}
  if (avoid_martians()) then {
{% elif peer.export4 == "DEFONLY" %}
  if (is_default()) then {
{% else %}
  include "/etc/bird/bird.conf.d/{{ peer.export4 }}_PFX4.inc";
  if (net ~ {{ peer.export4|replace("-", "_")|replace(":", "__") }}_PFX) then {
{% endif %}
    # ignore bogon AS_PATHs
    bogon_asns = BOGON_ASNS;
    if (bgp_path ~ bogon_asns) then {
      #print "Export rejected: bogon AS_PATH: ", net, " ", bgp_path;
      reject;
    }

    if ((65535, 65281) ~ bgp_community) then {
      #print "Export rejected: no-export community set: ", net, " ", bgp_path;
      reject;
    }

    if ((65535, 65282) ~ bgp_community) then {
      #print "Export rejected: no-advertise community set: ", net, " ", bgp_path;
      reject;
    }

    if (({{ ouras }}, 8, {{ peer.peeras }}) ~ bgp_large_community || ({{ ouras }}, 8, 0) ~ bgp_large_community) then {
      if (({{ ouras }}, 9, {{ peer.peeras }}) !~ bgp_large_community) then {
       reject;
     }
    }

{% if location is defined %}
    if (({{ ouras }}, 899, 0) ~ bgp_large_community) then {
      if (({{ ouras }}, 899, {{ location }}) !~ bgp_large_community) then {
        reject;
      }
    }

    if (({{ ouras }}, 800, 0) ~ bgp_large_community) then {
      if (({{ ouras }}, 800, {{ location }}) !~ bgp_large_community) then {
        bgp_path.prepend({{ ouras }});
      }
    }

    if (({{ ouras }}, 801, 0) ~ bgp_large_community) then {
      if (({{ ouras }}, 801, {{ location }}) !~ bgp_large_community) then {
        bgp_path.prepend({{ ouras }});
        bgp_path.prepend({{ ouras }});
      }
    }

    if (({{ ouras }}, 802, 0) ~ bgp_large_community) then {
      if (({{ ouras }}, 802, {{ location }}) !~ bgp_large_community) then {
        bgp_path.prepend({{ ouras }});
        bgp_path.prepend({{ ouras }});
        bgp_path.prepend({{ ouras }});
      }
    }

    if (({{ ouras }}, 803, 0) ~ bgp_large_community) then {
      if (({{ ouras }}, 803, {{ location }}) !~ bgp_large_community) then {
        bgp_path.prepend({{ ouras }});
        bgp_path.prepend({{ ouras }});
        bgp_path.prepend({{ ouras }});
        bgp_path.prepend({{ ouras }});
      }
    }

    if (({{ ouras }}, 804, 0) ~ bgp_large_community) then {
      if (({{ ouras }}, 804, {{ location }}) !~ bgp_large_community) then {
        bgp_path.prepend({{ ouras }});
        bgp_path.prepend({{ ouras }});
        bgp_path.prepend({{ ouras }});
        bgp_path.prepend({{ ouras }});
        bgp_path.prepend({{ ouras }});
      }
    }
{% endif %}

    if (({{ ouras }}, 2, {{ peer.peeras }}) ~ bgp_large_community || ({{ ouras }}, 2, 0) ~ bgp_large_community) then {
      bgp_path.prepend({{ ouras }});
    }
    if (({{ ouras }}, 3, {{ peer.peeras }}) ~ bgp_large_community || ({{ ouras }}, 3, 0) ~ bgp_large_community) then {
      bgp_path.prepend({{ ouras }});
      bgp_path.prepend({{ ouras }});
    }
    if (({{ ouras }}, 4, {{ peer.peeras }}) ~ bgp_large_community || ({{ ouras }}, 4, 0) ~ bgp_large_community) then {
      bgp_path.prepend({{ ouras }});
      bgp_path.prepend({{ ouras }});
      bgp_path.prepend({{ ouras }});
    }
    if (({{ ouras }}, 5, {{ peer.peeras }}) ~ bgp_large_community || ({{ ouras }}, 5, 0) ~ bgp_large_community) then {
      bgp_path.prepend({{ ouras }});
      bgp_path.prepend({{ ouras }});
      bgp_path.prepend({{ ouras }});
      bgp_path.prepend({{ ouras }});
    }

    accept;
  }
{% else %}
  # No export4: line found
{% endif %}
  reject;
}

{% if peer.label is defined %}
protocol bgp e_{{ peer.label|replace("-", "_")|replace(":", "__") }} {
{% else %}
protocol bgp e_{{ peer.name|replace("-", "_")|replace(":", "__") }} {
{% endif %}
  table ffnet;
  local as {{ ouras }};
  source address {{ peer.ipv4src | ipaddr('address') }};
  neighbor {{ peer.ipv4dst }} as {{ peer.peeras }};
  import keep filtered;
{% if peer.nobfd is not defined %}  bfd graceful;
{% endif %}
  import filter peer_in_{{ peer.name|replace("-", "_")|replace(":", "__") }};
  export filter peer_out_{{ peer.name|replace("-", "_")|replace(":", "__") }};
{% if peer.multihop is defined %}  multihop {{ peer.multihop }};
{% endif %}
{% if peer.direct is defined %}  direct;
{% endif %}
{% if peer.passwd4 is defined %}  password "{{ peer.passwd4 }}";
{% elif peer.passwd is defined %}  password "{{ peer.passwd }}";
{% endif %}
{% if peer.exportlimit4 is defined %}  export limit {{ peer.exportlimit4 }} action block;
{% endif %}
{% if peer.bgpopts is defined %}  {{ peer.bgpopts }};
{% else %}  next hop self;
{% endif %}
};

{% endif %}
{% endfor %}
{% endif %}

{% if ibgp_peers is defined %}
{% for peer in ibgp_peers %}
{% if peer.ipv4dst is defined %}
{% set ouras = ff_network.as_number|int %}
{% if peer.ouras is defined %}{% set ouras = peer.ouras %}{% endif %}
{% if peer.label is defined %}
protocol bgp i_{{ peer.label|replace("-", "_")|replace(":", "__") }} {
{% else %}
protocol bgp i_{{ peer.name|replace("-", "_")|replace(":", "__") }} {
{% endif %}
  table ffnet;
  local as {{ ouras }};
  source address {{ peer.ipv4src }};
  neighbor {{ peer.ipv4dst }} as {{ ouras }};
  bfd graceful;
  import filter {
{% if peer.import_filter4 is defined %}
    include "/etc/bird/bird.conf.d/{{ peer.import_filter4 }}";
{% endif %}
{% if peer.pref is defined %}    bgp_local_pref = {{ peer.pref }};{% endif %}
{% if peer.dfz is defined and peer.dfz != "no" %}
    if is_default() then reject;
{% else %}
    if is_default() then accept;
{% endif %}
    accept;
  };
  export filter {
    if ((65535, 65282) ~ bgp_community) then {
      reject;
    }

    accept;
  };
{% if peer.next_hop_self is defined %}  next hop self;
{% endif %}
{% if peer.bgpopts is defined %}  {{ peer.bgpopts }};
{% endif %}
{% if peer.direct is defined %}  direct;
{% endif %}
}

{% endif %}
{% endfor %}
{% endif %}
{% endif %} # bgp_router

{% if domaenenliste is defined %}
{% if ffrl_tun is defined or ffnw_tun is defined or ffgt_tun is defined %}
template bgp uplink {
	table ffnet;
	local as {{ff_network.as_number}};
	import where is_default();
	export filter hostroute;
	next hop self;
	multihop 64;
	default bgp_local_pref 200;
	default bgp_med 1;
    bfd graceful;
};
{% endif %}

template bgp internal {
	table ffnet;
	local as {{ff_network.as_number}};
	import filter {
		preference = 99;
		accept;
	};
	export where source = RTS_BGP;
	gateway direct;
	direct;
	next hop self;
    bfd graceful;
};

{% if ffrl_tun is defined %}
{% for tun in ffrl_tun %}
protocol bgp ffrl_{{tun.name}} from uplink {
	source address {{ tun.v4_remote | ipaddr( tun.v4_remote.split('.')[3] | int + 1) | ipaddr('address') }};
	neighbor {{tun.v4_remote | regex_replace("^(\d+\.\d+\.\d+\.\d+)/\d+$","\\1")}} as 201701;
{% if "bgp_local_pref" in tun %}
	default bgp_local_pref {{tun.bgp_local_pref}};
{% endif %}
{% if ffrl_nat_ip is not defined %}
	import filter {
		reject;
	};
	export filter {
		reject;
	};
{% endif %}
};

{% endfor %}
{% endif %}

{% if ffnw_tun is defined %}
{% for tun in ffnw_tun %}
protocol bgp ffnw_{{tun.name}} from uplink {
	source address {{ tun.v4_remote | ipaddr( tun.v4_remote.split('.')[3] | int + 1) | ipaddr('address') }};
	neighbor {{tun.v4_remote | regex_replace("^(\d+\.\d+\.\d+\.\d+)/\d+$","\\1")}} as 206313;
{% if "bgp_local_pref" in  tun %}
	default bgp_local_pref {{tun.bgp_local_pref}};
{% endif %}
};

{% endfor %}
{% endif %}

{% if ffgt_tun is defined %}
{% for tun in ffgt_tun %}
protocol bgp ffgt_{{tun.name}} from uplink {
	source address {{ tun.v4_local | ipaddr('address') }};
	neighbor {{ tun.v4_remote | ipaddr('address') }} as 206813;
{% if "bgp_local_pref" in tun %}
	default bgp_local_pref {{tun.bgp_local_pref}};
{% endif %}
{% if ffgt_nat_ip is not defined %}
	import filter {
		reject;
	};
	export filter {
		reject;
	};
{% endif %}
};

{% endfor %}
{% endif %}

{% for host in groups['gateways']|default([]) %}
{% if hostvars[host].vm_id != vm_id %}
protocol bgp ibgp_{{host|regex_replace('-','_')}} from internal {
{% if hostvars[host].vm_id < vm_id %}
	neighbor {{ipv4backbone16prefixstr}}{{ hostvars[host].vm_id-1 }}.{{vm_id*2}} as {{ff_network.as_number}};
{% else %}
	neighbor {{ipv4backbone16prefixstr}}{{ vm_id-1 }}.{{hostvars[host].vm_id*2+1}} as {{ff_network.as_number}};
{% endif %}
{% if hostvars[host].hoster|default('unknown') != hoster|default('unknown') %}
	import filter {
		preference = 50;
		accept;
	};
{% endif %}
}

{% endif %}
{% endfor %}
{% endif %}
