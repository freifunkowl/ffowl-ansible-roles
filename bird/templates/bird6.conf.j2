# {{ ansible_managed }}

log syslog { debug, trace, info, remote, warning, error, auth, fatal, bug };
{% if router_id is defined %}router id {{ router_id }};{% else %}router id {{ipv4backbone16prefixstr}}255.{{ vm_id }};{% endif %}

table ffnet;
filter export_to_upstream_filter {
  if source = RTS_STATIC then accept;
  reject;
};

filter subnetv6 {
{% if domaenenliste is defined %}
{% for domaene in domaenenliste|dictsort %}
  if net = {{domaenen[domaene[0]].ffv6_network}} then accept;
{% endfor %}
{% endif %}
  reject;
};

filter subnetv6_or_default {
  if net ~ [::/0{% if domaenenliste is defined %}{% for domaene in domaenenliste|dictsort %}, {{domaenen[domaene[0]].ffv6_network}}{% endfor %}{% endif %}] then accept;
  reject;
};

function is_default() {
	return (net ~ [::/0]);
};

function avoid_martians()
prefix set martians;
{
  # 2001::/23 contains for example 2001:4:112::/48, belonging to AS112
  # so we mustn't filter more specific
  # 3FFE::/16 et 5F00::/8 = formerly 6bone (IPv6 tests)
  martians = [ ::1/128, ::/128, ::ffff:0:0/96+, 100::/64+,
       2001:db8::/32+, 2001::/23, 2001:2::/48+, 64:ff9b::/96{96,128},
       2001:10::/28+, 2002::/17+, fc00::/7, fe80::/10, ff00::/8+,
       3FFE::/16+, 5F00::/8+, ::/0{0,15}, ::/0{49,128} ];

  if net ~ martians then return false;

  return true;
}

protocol kernel 'k_ffnet' {
  table ffnet;
  kernel table 42;
  device routes;
  persist;
  scan time 20;

  import all;
  export filter {
{% if loopback_ipv6 is defined %}
    if (source = RTS_BGP && avoid_martians()) then { krt_prefsrc = {{ loopback_ipv6 }}; }
{% endif %}
    accept;
  };
};

protocol direct {
  table ffnet;

  interface "lo";
  interface "gre-*";
  interface "bck-*";
{% if ffrl_tun is defined %}
  interface "tun-ffrl*";
{% endif %}
{% if ffnw_tun is defined %}
  interface "tun-ffnw*";
{% endif %}
{% if ffgt_tun is defined %}
  interface "tun-ffgt*";
{% endif %}
  interface "bat*";
}

protocol bfd {
  interface "gre*";
  interface "bck-*";
  multihop {
    passive;
  };
};

protocol device {
  scan time 10;
};

protocol kernel 'k_master' {
  scan time 20;
  table master;
  kernel table 254;
  import all;
  export all;
  persist;
};

protocol static 's_master'{
  table master;
  import all;
  export none;
};

{% if ipv6_direkt_ausleiten is defined and ipv6_direkt_ausleiten %}
protocol static v6lexit {
	table ffnet;
	preference 1000;
	route ::/0 via {{ ansible_default_ipv6.gateway }};
};
{% endif %}

filter freifunk {
{% if ff_network.v6_network is defined %}
  if net ~ {{ff_network.v6_network}} then accept;
{% endif %}
{% if not ffrl_tun is defined and not ffgt_tun is defined %}
  if net ~ [::/0] then accept;
{% endif %}

  reject;
}

{% if domaenenliste is defined %}
protocol radv {
  propagate routes yes;
  table ffnet;
  export all;
{% for domaene in domaenenliste|dictsort %}

  interface "bat{{domaene[0]}}" {
    max ra interval 20;
    link mtu 1280;
    prefix {{domaenen[domaene[0]].ffv6_network}} { };
{% if domaene[1].jusprog_dns_ip is not defined %}
    rdnss {
{% if domaene[1].server_id is defined %}
      ns {{domaenen[domaene[0]].ffv6_network | ipaddr(domaene[1].server_id) | ipaddr('address') }};
{% else %}
      ns {{domaenen[domaene[0]].ffv6_network | ipaddr(server_id) | ipaddr('address') }};
{% endif %}
    };
{% endif %}
    dnssl "{{freifunk.search_domain}}";
  };
{% endfor %}
};
{% endif %}

protocol static s_gesamt {
  table ffnet;
  route {{ff_network.v6_network}} reject;
};

{% if domaenenliste is defined %}
{% for domaene in domaenenliste|dictsort %}
#protocol static s_dom{{domaene[0]}} {
#  table ffnet;
#  route {{domaenen[domaene[0]].ffv6_network | regex_replace('..::/\d+$','00::/56')}} reject;
#};
{% endfor %}
{% endif %}

{% if dhcp is defined %}
#protocol static 's_{{inventory_hostname_short}}' {
#	table ffnet;
#	route {{ff_network.v6_network | regex_replace('..::/\d+$','00::/56')}} reject;
#};
{% endif %}

### additional configuration  ###
include "/etc/bird/bird6.conf.d/*.conf";
