{% if ospf is defined %}
filter ospf_out {
{% if ospf.export_filter6 is defined %}
  include "/etc/bird/bird6.conf.d/{{ ospf.export_filter6 }}";
{% endif %}

{% if ospf.legacymode|default(false) %}
  if (source = RTS_BGP) then reject;

  accept;
{% else %}
{% for p in ospf.prefixes.ipv6 | default([]) %}
  if (net ~ [ {{ p }} ] && (source = RTS_STATIC || source = RTS_DEVICE || source = RTS_STATIC_DEVICE)) then accept;
{% endfor %}
{% endif %}

  reject;
}

filter ospf_in {
{% if ospf.import_filter6 is defined %}
  include "/etc/bird/bird6.conf.d/{{ ospf.import_filter6 }}";
{% endif %}

{% if ospf.legacymode|default(false) %}
  accept;
{% else %}
{% for p in ospf.prefixes.ipv6 | default([]) %}
  if (net ~ [ {{ p }} ]) then accept;

{% endfor %}
  reject;
{% endif %}
}

protocol ospf o_intern {
  table ffnet;
{% if ecmp | default(false) %}
  ecmp on;
{% endif %}
  import filter ospf_in;
  export filter ospf_out;

  area 0 {
{% for interface in ospf.interfaces | default([]) %}
    interface "{{ interface.name }}" {
      cost {{ interface.cost | default(10) }};
{% if interface.options is defined %}
      {{ interface.options }}
{% endif %}
{% if interface.ttl_security | default(false) %}
      ttl security on;
{% endif %}
      bfd yes;
    };
{% endfor %}

{% for interface in ospf.stub_interfaces | default([]) %}
    interface "{{ interface.name }}" {
      stub;
    };
{% endfor %}
  };
}
{% endif %}

{% if ipv6_direkt_ausleiten|default(false) %}
protocol ospf upstream {
  table ffnet;
  import where is_default();
  export filter subnetv6;
{% if ospf_nat_instanceid is defined %}
  instance id {{ospf_nat_instanceid}};
{% endif %}

{% if ospf_nat_area is defined %}
  area {{ospf_nat_area}} {
{% else %}
  area 0.0.0.0 {
{% endif %}
    interface "{{ansible_default_ipv6.interface}}" {
      cost 10;
{% if ospf_nat_options is defined %}
      {{ospf_nat_options}}
{% endif %}
      bfd yes;
   };
  };
};
{% endif %}

{% if domaenenliste is defined %}
protocol ospf backbone {
  table ffnet;
  import filter freifunk;
  export filter {
    if source = RTS_BGP then reject;
    #if source = RTS_OSPF then reject;
    accept;
  };

  area 0.0.0.0 {
    interface "bat*" {
    stub;
  };

{% for host in groups['gateways']|default([]) %}
{% if hostvars[host].hoster|default('unknown') != hoster|default('unknown') %}
    interface "bck-{{host}}" {
      cost 1000;
      bfd yes;
    };
{% endif %}
{% endfor %}
    interface "bck-*" {
      cost 1000;
      bfd yes;
    };
{% if ffrl_tun is defined or ffgt_tun is defined %}
    interface "lo" {
      stub;
    };
{% endif %}
  };
};
{% endif %}
