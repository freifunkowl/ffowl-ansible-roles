# {{ ansible_managed }}
table icvpn;

define ownas = {{ icvpn_as }};

router id {{ ansible_default_ipv4.address }};

### functions ###

# own network
function is_self_net() {
    return net ~ [
        fec0:0:0:0:a:cf:0:0/96+
    ];
};

function is_ula() {
    return net ~ [
        fc00::/7{48,64}
    ];
};

# freifunk ip ranges in general
function is_freifunk() {
    return is_ula() || (net ~ [
        2001:bf7::/32{44,64}
    ]);
};

function is_default() {
    return net ~ ::/0;
};

### kernel ###

protocol kernel k_default {
    scan time 10;
    import where is_self_net();
    export none;
};

protocol kernel k_freifunk {
    table icvpn;
    kernel table {{ icvpn_routing_table }};
    scan time 10;
    import none;
    export where net != ::/0 && net != 2a06:8782::/32;
};

# this pseudo-protocol watches all interface up/down events
protocol device {
    scan time 10;
};

### pipes ###

protocol pipe p_maintbl {
    peer table icvpn;
    import all;
    export where is_self_net();
};

### static routes ###

## create a super route for own freifunk net in icvpn table
#protocol static static_icvpn {
#    table icvpn;
#    route fec0:0:0:0:a:cf:0:0/96 reject;
#};

## more specific routes in own freifunk net in master table
#protocol static local_XXX {
#    route  ipv6_local_address | ansible.utils.ipaddr('network/prefix')  via "br-XXX";
#    route  ipv6_global_address | ansible.utils.ipaddr('network/prefix')  via "br-XXX";
#};

### templates ###

filter icvpn_imp
prefix set LOCAL_ICVPN_PFX;
{
    include "/etc/bird/bird6.conf.d/LOCAL_ICVPN_PFX";
    if net.len > 64 then reject;
    if (net ~ LOCAL_ICVPN_PFX) then reject;
    if is_ula() then accept;
    reject;
};

filter icvpn_exp
prefix set LOCAL_ICVPN_PFX;
{
    include "/etc/bird/bird6.conf.d/LOCAL_ICVPN_PFX";
    if (net ~ LOCAL_ICVPN_PFX) then accept;
    reject;
};

template bgp icvpn_t {
    local as ownas;
    direct;
    table icvpn;
    import filter icvpn_imp;
    export filter icvpn_exp;
};

template bgp icvpn_default from icvpn_t {
    import where (is_freifunk() || is_default()) && !is_self_net();
};

template bgp internal from icvpn_t {
    import filter {
        bgp_path.prepend(ownas);
        if ((is_freifunk() || is_default()) && !is_self_net()) then accept;
        else reject;
    };
};

### include extra config files ###
include "/etc/bird/bird6.conf.d/*.conf";
